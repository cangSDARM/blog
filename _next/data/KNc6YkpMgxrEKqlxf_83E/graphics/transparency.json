{"pageProps":{"post":{"matter":{"title":"Graphics Programming(七) —— 透明效果","tags":["graphics"],"index":7},"absPath":"/home/runner/work/blog/blog/renderer/mdx/graphics/transparency.mdx","type":"mdx","slug":["transparency"],"collection":"graphics","url":"/graphics/transparency"},"compiled":{"content":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst frontmatter = {\n  \"title\": \"Graphics Programming(七) —— 透明效果\",\n  \"tags\": [\"graphics\"],\n  \"index\": 7\n};\nconst QuoteList = [\"Pass中的 ZWrite Off 用于关闭深度写入\", \"Min和Max是分量比较, 并分量代入的\"];\nconst ImgList = [\"常见的混合类型\", \"滤波模式\"];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    ...props.components\n  }, {Aphorism, Expansion, Model, Quote, Tab, Table} = _components;\n  if (!Aphorism) _missingMdxReference(\"Aphorism\", true);\n  if (!Expansion) _missingMdxReference(\"Expansion\", true);\n  if (!Model) _missingMdxReference(\"Model\", true);\n  if (!Quote) _missingMdxReference(\"Quote\", true);\n  if (!Tab) _missingMdxReference(\"Tab\", true);\n  if (!Table) _missingMdxReference(\"Table\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Aphorism, {\n      children: \"无论怎样安排渲染顺序总是会有机会出错\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"前置知识\"\n    }), \"\\n\", _jsxs(Tab, {\n      children: [\"对于\", _jsx(Expansion, {\n        children: \"不透明(opaque)物体\"\n      }), \", 深度缓冲(depth buffer|z-buffer)技术解决了遮盖效果\", _jsxs(Tab, {\n        expan: true,\n        children: [\"当开启深度测试后, 将根据片元的深度值和已经在深度缓冲中的深度值比较来决定片元是否被遮挡\", _jsx(\"br\", {}), \"当开启深度写入后, 深度值低的片元将更新颜色缓冲中的像素值, 并将其深度值更新存储于深度缓冲中\"]\n      }), \"对于透明物体, 有时必须关闭深度写入(ZWrite)\"]\n    }), \"\\n\", _jsx(\"p\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"基本原理\"\n    }), \"\\n\", _jsxs(Tab, {\n      children: [_jsx(Expansion, {\n        children: \"透明度测试\"\n      }), _jsxs(Tab, {\n        expan: true,\n        children: [\"透明度测试(Alpha Test): 当片元透明度低于阈值时, 舍弃该片元\", _jsx(\"br\", {}), \"只有完全透明或者完全不透明之分\", _jsx(\"br\", {}), \"同时不需要关闭深度写入\"]\n      }), _jsx(Expansion, {\n        children: \"透明度混合\"\n      }), _jsxs(Tab, {\n        expan: true,\n        children: [\"透明度混合(Alpha Blending): 使用当前片元的透明度来混合颜色缓冲器中的颜色, 获取新颜色\", _jsx(\"br\", {}), \"可以得到真正的半透明效果\", _jsx(\"br\", {}), \"\\\"混合时\\\"\", _jsx(Quote, {\n          id: \"#1\",\n          children: \"关闭深度写入\"\n        }), \", 且必须严格控制物体的渲染顺序\"]\n      }), _jsx(Expansion, {\n        children: \"双面渲染\"\n      }), _jsxs(Tab, {\n        expan: true,\n        children: [\"默认情况渲染引擎会自动剔除物体背面的贴图, 导致透明物体看不到内部和背面\", _jsx(\"br\", {}), \"需要通过 Cull 命令修改是否剔除(Cull Off|Back|Front)\", _jsx(\"br\", {}), \"对于透明度混合来讲, 双面渲染需要严格对待.\"]\n      })]\n    }), \"\\n\", _jsx(\"p\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"渲染\"\n    }), \"\\n\", _jsxs(Tab, {\n      children: [_jsx(Expansion, {\n        children: \"渲染顺序\"\n      }), _jsxs(Tab, {\n        expan: true,\n        children: [\"一般来说有几个要求:\", _jsxs(Tab, {\n          children: [_jsxs(_components.ol, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"先渲染所有不透明物体, 并开启深度测试和深度写入\"\n            }), \"\\n\"]\n          }), _jsx(\"br\", {}), _jsxs(_components.ol, {\n            start: \"2\",\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"后把半透明物体按距离远近进行排序, 然后依顺序渲染半透明物体, 并开启深度测试关闭深度写入\"\n            }), \"\\n\"]\n          }), _jsx(\"br\", {}), _jsxs(_components.ol, {\n            start: \"3\",\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"模型应该尽量是凸面体\"\n            }), \"\\n\"]\n          })]\n        }), \"如果仍有错误渲染, 应拆分模型或者模糊透明通道\"]\n      }), _jsx(Expansion, {\n        children: \"渲染队列\"\n      }), _jsxs(Tab, {\n        expan: true,\n        children: [\"为使得程序员能自主的控渲染, unity使用渲染队列(render queue)标签来辅助渲染\", _jsx(\"br\", {}), \"位于SubShader的Tag标签的\\\"Queue\\\"值\", _jsx(Table, {\n          children: [{\n            cells: [\"名称\", \"索引号\", \"描述\"],\n            component: ['th', 'th', 'th']\n          }, {\n            cells: [\"Background\", \"1000\", \"该队列会在其它任何队列前进行渲染(通常用于绘制背景)\"]\n          }, {\n            cells: [\"Geometry\", \"2000\", \"默认的队列.(不透明物体使用)\"]\n          }, {\n            cells: [\"AlphaTest\", \"2450\", \"需要透明度测试的队列.\"]\n          }, {\n            cells: [\"Transparent\", \"3000\", \"按照从后往前的顺序渲染的队列.(使用了透明度混合的物体使用)\"]\n          }, {\n            cells: [\"Overlay\", \"4000\", \"用于实现叠加效果.(最后渲染的物体使用)\"]\n          }]\n        })]\n      }), _jsx(Expansion, {\n        children: \"颜色混合\"\n      }), _jsxs(Tab, {\n        expan: true,\n        children: [\"使用alpha混合颜色缓冲器中的颜色时, 如何混合由 Blend 指令控制\", _jsx(\"br\", {}), \"位于Pass代码块中\", _jsx(\"br\", {}), _jsx(Model, {\n          about: \"@1\",\n          children: \"常见的混合效果\"\n        }), _jsx(Table, {\n          children: [{\n            cells: [\"Blend Off\", \"关闭颜色混合\"]\n          }, {\n            cells: [\"Blend Src混合因子 Dst混合因子\", \"开启混合并设置混合因子\"]\n          }, {\n            cells: [\"Blend SrcRGB混合因子 DstRGB混合因子, SrcA混合因子 DstA混合因子\", \"与上面相似, 只是使用不同的因子混合透明通道\"]\n          }, {\n            cells: [\"BlendOp Operation\", _jsxs(\"span\", {\n              children: [\"更改颜色混合的运算(Add/Sub/RevSub/\", _jsx(Quote, {\n                id: \"#2\",\n                children: \"Min/Max\"\n              }), \")\"]\n            })]\n          }]\n        }), _jsx(\"br\", {}), \"计算公式: 缓存颜色RGB/A = 混合因子 * 源颜色RGB/A + 混合因子 * 缓存中颜色RGB/A\", _jsx(Table, {\n          title: \"混合因子\",\n          children: [{\n            cells: [\"参数\", \"描述\"],\n            component: ['th', 'th']\n          }, {\n            cells: [\"One\", \"因子为1\"]\n          }, {\n            cells: [\"Zero\", \"因子为0\"]\n          }, {\n            cells: [\"SrcColor\", \"因子为源颜色值\"]\n          }, {\n            cells: [\"SrcAlpha\", \"因子为源alpha值\"]\n          }, {\n            cells: [\"DstColor\", \"因子为目标颜色值\"]\n          }, {\n            cells: [\"DstAlpha\", \"因子为目标alpha值\"]\n          }, {\n            cells: [\"OneMinusSrcColor\", \"因子为(1-源颜色)\"]\n          }, {\n            cells: [\"OneMinusSrcAlpha\", \"因子为(1-源alpha)\"]\n          }, {\n            cells: [\"OneMinusDstColor\", \"因子为(1-目标颜色)\"]\n          }, {\n            cells: [\"OneMinusDstAlpha\", \"因子为(1-目标alpha)\"]\n          }]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  frontmatter,\n  QuoteList,\n  ImgList,\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","toc":[]},"overview":[{"length":22,"name":"archive"},{"length":15,"name":"graphics"},{"length":1,"name":"math"},{"length":8,"name":"network"},{"length":2,"name":"sstory"},{"name":"practice","length":1}]},"__N_SSG":true}