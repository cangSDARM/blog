{"pageProps":{"post":{"matter":{"title":"顶点/片元着色器: Vertex/Fragment Shader","tags":["graphics"],"index":4.2},"absPath":"/home/runner/work/blog/blog/renderer/mdx/graphics/shaderSyntax/shader2.0.mdx","type":"mdx","slug":["shaderSyntax","shader2.0"],"collection":"graphics","url":"/graphics/shaderSyntax/shader2.0"},"compiled":{"content":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst frontmatter = {\n  \"title\": \"顶点/片元着色器: Vertex/Fragment Shader\",\n  \"tags\": [\"graphics\"],\n  \"index\": 4.2\n};\nconst QuoteList = [\"unity标准的struct:  /Unity/Editor/Data/CGIncludes/中 appdata_tan, appdata_base, appdata_full, appdata_img, v2f_img(用于顶点着色器输出)\", \"在Shader Model2(默认编译版本) 和 Shader Model3中, n=8; 在Shader Model4 和 Shader Model5中, n=16\", \"除SV_POSITION外, 其它的可以存储任意值到这些信息的描述变量中\", \"PC或主机会使用字节对齐, float/half/fixed是等效的; <br>移动平台上不会字节对齐, 性能和范围有差异. <br>最高float4/half4/fixed4\"];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    em: \"em\",\n    p: \"p\",\n    ...props.components\n  }, {Expansion, Navigation, Quote, Tab, Table} = _components;\n  if (!Expansion) _missingMdxReference(\"Expansion\", true);\n  if (!Navigation) _missingMdxReference(\"Navigation\", true);\n  if (!Quote) _missingMdxReference(\"Quote\", true);\n  if (!Tab) _missingMdxReference(\"Tab\", true);\n  if (!Table) _missingMdxReference(\"Table\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Navigation, {\n      desc: \"返回\",\n      to: \"./\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"-------------------------------------总的来说灵活性最好, 但编写难度也更大-------------------------------------\"\n    }), \"\\n\", _jsxs(Tab, {\n      children: [\"Pass{\", _jsxs(Tab, {\n        children: [\"CGPROGRAM\", _jsx(\"br\", {}), \"#pragma target 3.0      //使用Shader Model3(OpenGL和移动平台只能用Model3)\", _jsx(\"br\", {}), \"#pragma vertex vert \\t//定义一个顶点着色器的入口函数\", _jsx(\"br\", {}), \"#pragma fragment frag\\t//定义一个片段着色器的入口函数\", _jsx(\"br\", {}), \"//\", _jsx(Expansion, {\n          children: \"头文件\"\n        }), \": #include \\\"UnityCG.cginc\\\" 导入\", _jsxs(Tab, {\n          expan: true,\n          children: [\"头文件由 .cginc 结尾\", _jsx(\"br\", {}), \"在: \", _jsx(_components.a, {\n            href: \"https://unity3d.com/cn/get-unity/download/archive\",\n            children: \"https://unity3d.com/cn/get-unity/download/archive\"\n          }), \" (内置着色器)\", _jsx(\"br\", {}), \"或: /Unity/Editor/Data/CGIncludes/ 内可以找到\", _jsx(\"br\", {}), _jsx(Expansion, {\n            children: \"常用头文件\"\n          }), _jsxs(Tab, {\n            expan: true,\n            children: [\"HISLSupport.cginc: 编译时自动包含. 有用于跨平台编译的宏和定义\", _jsx(\"br\", {}), \"UnityShaderVariables.cginc: 编译时自动包含. 有内置的全局变量\", _jsx(\"br\", {}), \"Lighting.cginc: 包含各种内置的光照模型(若是Surface Shader, 会自动包含)\", _jsx(\"br\", {}), \"UnityCG.cginc: 常见的函数, 宏和结构体\", _jsx(\"br\", {}), \"UnityStandardBRDF.cginc: 包含基于物理渲染的宏和结构体\", _jsx(\"br\", {}), \"UnityStandardCore.cginc: 实现基于物理渲染时必须包含\"]\n          })]\n        }), _jsx(\"br\", {}), \"//uniform 提供变量初始值如何指定和存储的相关信息(可省略)\", _jsx(\"br\", {}), \"//调用Properties\", _jsx(\"br\", {}), \"uniform \", _jsx(Expansion, {\n          children: \"fixed4\"\n        }), \" _Color;\", _jsx(\"br\", {}), _jsx(Tab, {\n          expan: true,\n          children: _jsx(Table, {\n            children: [{\n              cells: [_jsx(Quote, {\n                id: \"#4\",\n                children: \"CG/HLSL中的不同数值类型\"\n              })],\n              props: [{\n                id: \"#4\",\n                colSpan: '2'\n              }]\n            }, {\n              cells: [\"float\", \"使用32位存储\"],\n              component: ['th']\n            }, {\n              cells: [\"half\", \"使用16位存储, [-60.000, 60.000]\"],\n              component: ['th']\n            }, {\n              cells: ['fixed', '使用11位存储, [-2.0, 2.0]'],\n              component: ['th']\n            }]\n          })\n        }), \"struct \", _jsx(Expansion, {\n          children: _jsx(Quote, {\n            id: \"#1\",\n            children: \"appdata\"\n          })\n        }), \"{\", _jsxs(Tab, {\n          expan: true,\n          children: [\"//声明格式: 类型 变量名 : 信息名称;\", _jsx(\"br\", {}), \"float4 vertex : POSITION;\", _jsx(\"br\", {}), _jsx(Table, {\n            title: \"Unity 包含信息\",\n            children: [{\n              cells: ['信息名', '信息内容', '通常使用的类型'],\n              props: [{\n                className: 'Color'\n              }, {\n                className: 'Color'\n              }, {\n                className: 'Color'\n              }],\n              component: ['th', 'th', 'th']\n            }, {\n              cells: ['传递参数给顶点着色器时', ''],\n              component: ['th'],\n              props: [{\n                colSpan: 2\n              }]\n            }, {\n              cells: [\"POSITION\", \"顶点位置信息\", \"float4 / float3\"]\n            }, {\n              cells: [\"NORMAL\", \"法线信息:[-1.0 1.0]\", \"float3\"]\n            }, {\n              cells: [\"TEXCOORD0\", \"第一组 UV 坐标\", \"float4 / float3 / float2\"]\n            }, {\n              cells: [\"TEXCOORD1\", \"第二组 UV 坐标\", \"float4 / float3 / float2\"]\n            }, {\n              cells: [_jsx(Quote, {\n                id: \"#2\",\n                children: \"TEXCOORDn\"\n              }), \"第n组 UV 坐标\", \"float4 / float3 / float2\"]\n            }, {\n              cells: [\"TANGENT\", \"切线信息(used for normal mapping)\", \"float4\"]\n            }, {\n              cells: [\"COLOR\", \"per-vertex color\", \"float4\"]\n            }, {\n              cells: [_jsx(Quote, {\n                id: \"#3\",\n                children: \"顶点着色器传递给片元着色器时\"\n              }), ''],\n              props: [{\n                colSpan: 2\n              }],\n              component: ['th']\n            }, {\n              cells: [\"SV_POSITION(必须包含)\", \"输出已经转换为裁剪坐标的顶点位置信息\", \"float4 / float3\"]\n            }, {\n              cells: [\"COLOR0\", \"输出第一组顶点颜色\", \" ~ \"]\n            }, {\n              cells: [\"COLOR1\", \"输出第二组顶点颜色\", \" ~ \"]\n            }, {\n              cells: [\"TEXCOORDn\", \"输出第n组 UV 坐标\", \" ~ \"]\n            }, {\n              cells: [\"片元着色器输出时\", \"\"],\n              component: ['th'],\n              props: [{\n                colSpan: 2\n              }]\n            }, {\n              cells: [\"SV_Target\", \"输出值存储在渲染目标(render target)中\", \"float4 / fixed4\"]\n            }]\n          }), _jsx(\"br\", {}), \"//调用格式: 和C语言一样\"]\n        }), \"}\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"//\", _jsx(Expansion, {\n          children: \"函数\"\n        }), _jsxs(Tab, {\n          expan: true,\n          children: [\"返回值 函数名(参数列表) : 返回信息 { 函数内容 }\", _jsx(\"br\", {}), _jsx(Expansion, {\n            children: \"常用函数\"\n          }), \": 需要自己归一化\", _jsxs(Tab, {\n            expan: true,\n            children: [_jsx(Expansion, {\n              children: \"仅用于前向渲染的\"\n            }), \":\", _jsxs(Tab, {\n              expan: true,\n              children: [\"float3 WorldSpaceLightDir(float4 v): 输入模型空间的顶点位置, 返回世界空间中从该点到光源的光照方向\", _jsx(\"br\", {}), \"float3 UnityWorldSpaceLightDir(float4 v): 和上面函数类似. 但输入世界空间\", _jsx(\"br\", {}), \"float3 ObjSpaceLightDir(float4 v): 和上面函数类似. 但输入输出都是模型空间\"]\n            }), _jsx(\"br\", {}), \"float3 WorldSpaceViewDir(float4 v): 输入模型空间的顶点位置, 返回世界空间中从该点到摄像机的观察方向\", _jsx(\"br\", {}), \"float3 UnityWorldSpaceViewDir(float4 v): 和上面函数类似. 但输入世界空间\", _jsx(\"br\", {}), \"float3 ObjSpaceViewDir(float4 v): 和上面函数类似. 但输入输出都是模型空间\", _jsx(\"br\", {}), \"float3 UnityObjectToWorldNormal(float3 norm): 法线方向 模型空间->世界空间\", _jsx(\"br\", {}), \"float3 UnityObjectToWorldDir(in float3 dir): 矢量 模型空间->世界空间\", _jsx(\"br\", {}), \"float3 UnityWorldToObjectDir(float3 dir): 矢量 世界空间->模型空间\", _jsx(\"br\", {}), \"float saturate(float2/float3/float4 x): 把x各分量裁剪到[0, 1]范围内\", _jsx(\"br\", {}), \"float reflect(float i, float n): 给定入射光线(指向交点)/法线, 返回其反射方向\"]\n          })]\n        }), _jsx(\"br\", {}), \"//顶点着色器的入口函数, 逐顶点调用\", _jsx(\"br\", {}), \"//参数是 meshrender 解析而来\", _jsx(\"br\", {}), \"//SV_POSITION表示 输出是:裁剪空间中的顶点坐标\", _jsx(\"br\", {}), \"float4 vert(appdata v) : SV_POSITION{\", _jsxs(Tab, {\n          children: [\"return mul(UNITY_MATRIX_MVP, v.vertex);\", _jsx(\"br\", {}), \"//mul 表调用矩阵乘法(注意左乘和右乘右区别)\\n//2017版本后: replaced 'mul(UNITY_MATRIX_MVP,\", _jsx(_components.em, {\n            children: \")' with 'UnityObjectToClipPos(\"\n          }), \")'\"]\n        }), \"}\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"//片段着色器的入口函数, 逐片元调用\", _jsx(\"br\", {}), \"//参数是 顶点着色器入口函数的返回值\", _jsx(\"br\", {}), \"//SV_Target表示 输出的fixed存储在:render target物体中\", _jsx(\"br\", {}), \"fixed4 frag(v2f i): SV_Target{\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"}\", _jsx(\"br\", {}), \"ENDCG\"]\n      }), \"}\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  frontmatter,\n  QuoteList,\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","toc":[]},"overview":[{"length":22,"name":"archive"},{"length":15,"name":"graphics"},{"length":1,"name":"math"},{"length":8,"name":"network"},{"length":2,"name":"sstory"}]},"__N_SSG":true}