{"version":3,"file":"component---src-templates-haskell-js-bb7f61d1b506857560ad.js","mappings":"4OAqCe,SAASA,EAAT,GAA6B,IA7BrBC,EACfC,EA4B2BC,EAAQ,EAARA,KACzBC,EAAgCD,EAAhCC,IAAKC,EAA2BF,EAA3BE,YAAaC,EAAcH,EAAdG,UAClBC,EAA8BH,EAA9BG,YAAaC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACvBC,EACFD,EAAOE,OAAP,IAAoBF,EAAOG,YAA3B,mBAEIL,EAAYG,MAClB,OACE,gBAAC,IAAD,CACEG,OAAQ,CACNC,MAAO,CACLC,gBAAgB,QAAQC,EAAAA,EAAAA,GAAOX,EAAYY,iBAA5B,IACfC,eAAe,SAEjBC,UA3CelB,EA2CSK,EAAUW,gBA1ClCf,GAAQkB,EAAAA,EAAAA,GAASnB,GAGrB,gBAAC,EAAAoB,KAAD,CAAMC,GAAG,iBACP,uBACER,MAAO,CACLS,QAAQ,cACRC,MAAM,OACNC,WAAW,OACXC,cAAc,WAGhB,gBAAC,EAAAC,EAAD,CACEC,IAAK,GACL1B,MAAOA,EACPY,MAAO,CACLe,SAAS,OAGTC,OAAO,kCAGX,sFAuBF,gBAAC,IAAD,CACEpB,MAAOA,EACPqB,OAAQ,CACNC,cACEvB,EAAOE,OAAP,IAAoBF,EAAOG,YAA3B,gCAKN,uBAAKqB,UAAU,gBACb,0BAAK1B,EAAYG,OAEjB,gBAAC,IAAD,CAAUwB,KAAM3B,EAAY2B,OAC5B,gBAAC,EAAAC,YAAD,KAAc3B","sources":["webpack://gatsby-website/./src/templates/haskell.js"],"sourcesContent":["import { graphql, Link } from \"gatsby\";\nimport { GatsbyImage, getImage, getSrc } from \"gatsby-plugin-image\";\nimport { MDXRenderer } from \"gatsby-plugin-mdx\";\nimport React from \"react\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport TagsList from \"../components/tag-lists\";\n\nfunction HaskellHeader(fluid) {\n  const image = getImage(fluid);\n\n  return (\n    <Link to=\"/tags/haskell\">\n      <div\n        style={{\n          display: `inline-flex`,\n          color: `#fff`,\n          marginLeft: `5rem`,\n          flexDirection: `column`,\n        }}\n      >\n        <GatsbyImage\n          alt={\"\"}\n          image={image}\n          style={{\n            fontSize: `45px`,\n            // width: `${fluid.presentationWidth * resizeWeight}px`,\n            // height: `${fluid.presentationHeight * resizeWeight}px`,\n            filter: `hue-rotate(180deg) invert(1)`,\n          }}\n        />\n        <h6>An advanced, purely functional programming language</h6>\n      </div>\n    </Link>\n  );\n}\n\nexport default function Template({ data }) {\n  const { mdx, headerIamge, logoIamge } = data;\n  const { frontmatter, body, fields } = mdx;\n  let title =\n    fields.slug === `/${fields.templateTag}`\n      ? `LearnYouAHaskell`\n      : frontmatter.title;\n  return (\n    <Layout\n      header={{\n        style: {\n          backgroundImage: `url(${getSrc(headerIamge.childImageSharp)})`,\n          backgroundSize: `cover`,\n        },\n        children: HaskellHeader(logoIamge.childImageSharp),\n      }}\n    >\n      <SEO\n        title={title}\n        config={{\n          titleTemplate:\n            fields.slug === `/${fields.templateTag}`\n              ? `%s`\n              : `%s | LearnYouAHaskell`,\n        }}\n      ></SEO>\n      <div className=\"haskell-post\">\n        <h1>{frontmatter.title}</h1>\n        {/* <h2>{frontmatter.date}</h2> */}\n        <TagsList tags={frontmatter.tags} />\n        <MDXRenderer>{body}</MDXRenderer>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query ($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      body\n      frontmatter {\n        date\n        title\n        tags\n      }\n      fields {\n        slug\n        templateTag\n      }\n    }\n\n    headerIamge: file(relativePath: { eq: \"haskell-header.png\" }) {\n      childImageSharp {\n        gatsbyImageData(formats: [AUTO, WEBP], quality: 100)\n      }\n    }\n\n    logoIamge: file(relativePath: { eq: \"haskell-logo.png\" }) {\n      childImageSharp {\n        gatsbyImageData(formats: [AUTO, WEBP], quality: 100, height: 56)\n      }\n    }\n  }\n`;\n"],"names":["Template","fluid","image","data","mdx","headerIamge","logoIamge","frontmatter","body","fields","title","slug","templateTag","header","style","backgroundImage","getSrc","childImageSharp","backgroundSize","children","getImage","Link","to","display","color","marginLeft","flexDirection","G","alt","fontSize","filter","config","titleTemplate","className","tags","MDXRenderer"],"sourceRoot":""}