{"version":3,"sources":["webpack:///./src/components/network/style.module.css","webpack:///./src/templates/network.js","webpack:///./src/components/indexing/index.js"],"names":["module","exports","shotCodes","h3","props","style","margin","blockquote","className","styles","cblockquote","Template","data","mdx","headerIamge","allMdx","frontmatter","body","fields","title","slug","templateTag","header","backgroundImage","childImageSharp","fluid","src","backgroundSize","config","titleTemplate","netPost","maxWidth","fontFamily","fontSize","edges","tags","components","query","ensureExist","element","index","maxLength","text","maximum","res","substr","length","Math","max","Indexing","otherProps","node","findIndex","Array","from","filter","toString","indexOf","jumpNonNavigable","previous","getPrevious","next","getNext","width","display","justifyContent","to","name","PropType","array","string"],"mappings":"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","file":"component---src-templates-network-js-c54d55262b9009f1bb0f.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"netPost\":\"style-module--netPost--2lUUb\",\"cblockquote\":\"style-module--cblockquote--3N1Cj\"};","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport Indexing from \"../components/indexing\";\nimport TagsList from \"../components/tag-lists\";\n\nimport { MDXProvider } from \"@mdx-js/react\";\nimport { MDXRenderer } from \"gatsby-plugin-mdx\";\n\nimport styles from \"../components/network/style.module.css\";\n\nconst shotCodes = {\n  h3: (props) => <h3 style={{ margin: `20px 0 10px` }} {...props} />,\n  // p: props => <p className={styles.cp} {...props} />,\n  blockquote: (props) => (\n    <blockquote className={styles.cblockquote} {...props} />\n  ),\n};\n\nexport default function Template({ data }) {\n  const { mdx, headerIamge, allMdx } = data;\n  const { frontmatter, body, fields } = mdx;\n  let title =\n    fields.slug === `/${fields.templateTag}`\n      ? `Network-Top2Down`\n      : frontmatter.title;\n  return (\n    <Layout\n      header={{\n        style: {\n          backgroundImage: `url(${headerIamge.childImageSharp.fluid.src})`,\n          backgroundSize: `cover`,\n        },\n      }}\n    >\n      <SEO\n        title={title}\n        config={{\n          titleTemplate:\n            fields.slug === `/${fields.templateTag}`\n              ? `%s`\n              : `%s | Network-Top2Down`,\n        }}\n      ></SEO>\n      <div\n        className={styles.netPost}\n        style={{\n          maxWidth: `960px`,\n          fontFamily: `YaHei, Helvetica, arial, sans-serif`,\n          fontSize: `16px`,\n        }}\n      >\n        <h1>{frontmatter.title}</h1>\n        <Indexing slug={fields.slug} data={allMdx?.edges} />\n        <TagsList tags={frontmatter.tags} />\n        {/* <TagsList tags={post.frontmatter.tags} /> */}\n        <MDXProvider components={shotCodes}>\n          <MDXRenderer>{body}</MDXRenderer>\n        </MDXProvider>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      body\n      frontmatter {\n        tags\n        title\n      }\n      fields {\n        slug\n        templateTag\n      }\n    }\n\n    allMdx(\n      sort: { fields: [frontmatter___index, fileAbsolutePath], order: ASC }\n      filter: { frontmatter: { tags: { in: [\"network\"] } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            index\n          }\n        }\n      }\n    }\n\n    headerIamge: file(relativePath: { eq: \"network-logo.png\" }) {\n      childImageSharp {\n        fluid(fit: COVER, pngQuality: 100) {\n          src\n          presentationHeight\n          presentationWidth\n          originalName\n        }\n      }\n    }\n  }\n`;\n","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport PropType from \"prop-types\";\n\nfunction findIndex(data, slug) {\n  let element;\n  if (data)\n    for (element of data) {\n      const { node } = element;\n      if (slug === node?.fields?.slug) {\n        return node?.frontmatter?.index - 1;\n      }\n    }\n  return -1;\n}\n\n/**\n * Skip elements without integer index\n * @param {Array} data\n */\nfunction jumpNonNavigable(data) {\n  return Array.from(data).filter(\n    (element) => element?.node?.frontmatter?.index?.toString().indexOf(\".\") < 0\n  );\n}\n\nfunction getPrevious(data, index) {\n  if (data) return data[index - 1]?.node;\n  return undefined;\n}\n\nfunction getNext(data, index) {\n  if (data) return data[index + 1]?.node;\n  return undefined;\n}\n\nfunction ensureExist(\n  element = {\n    fields: {\n      slug: \"/\",\n    },\n    frontmatter: {\n      title: \"首页\",\n      index: -1,\n    },\n  }\n) {\n  return element;\n}\n\nfunction maxLength(text, maximum = 10) {\n  let res = text.substr(0, maximum);\n  if (text.length > maximum) {\n    res += \"...\";\n    res += text.substr(Math.max(res.length + 6, text.length - maximum));\n  }\n  return res;\n}\n\nconst Indexing = ({ slug, data, ...otherProps }) => {\n  data = jumpNonNavigable(data);\n  const index = findIndex(data, slug);\n  const previous = ensureExist(getPrevious(data, index));\n  const next = ensureExist(getNext(data, index));\n\n  return (\n    index > -1 && (\n      <div\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n        {...otherProps}\n      >\n        <Link to={previous.fields.slug} name=\"previous\">\n          {`<-`}\n          {maxLength(previous.frontmatter.title)}\n          {`-`}\n        </Link>\n        <Link to={next?.fields?.slug} name=\"previous\">\n          {`-`}\n          {maxLength(next?.frontmatter?.title)}\n          {` ->`}\n        </Link>\n      </div>\n    )\n  );\n};\n\nIndexing.PropType = {\n  data: PropType.array,\n  slug: PropType.string,\n};\n\nexport default Indexing;\n"],"sourceRoot":""}