{"pageProps":{"post":{"matter":{"title":"Graphics Programming(十) —— 特殊渲染","tags":["graphics"],"index":10},"absPath":"/home/runner/work/blog/blog/renderer/mdx/graphics/particularRendering.mdx","type":"mdx","slug":["particularRendering"],"collection":"graphics","url":"/graphics/particularRendering"},"compiled":{"content":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst frontmatter = {\n  \"title\": \"Graphics Programming(十) —— 特殊渲染\",\n  \"tags\": [\"graphics\"],\n  \"index\": 10\n};\nconst QuoteList = [\"n和N表示相邻面片的法线方向, v是视角到该边任意顶点的方向. 用以检测是否同面\", \"参考: https://docs.unity3d.com/Manual/ReflectionProbes.html\", \"参考: https://docs.untiy3d.com/Manual/GIIntro.html\", \"其实不同设备有不同的细微差别(伽马响应曲线), 但硬件的调整和sRGB标准可以使得不同设备的兼容——显示大体上相同\"];\nconst ImgList = [\"反射等式\", \"漫反射项\", \"高光反射项\", \"unity的PBS\"];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  }, {Aphorism, Expansion, Model, Quote, Tab} = _components;\n  if (!Aphorism) _missingMdxReference(\"Aphorism\", true);\n  if (!Expansion) _missingMdxReference(\"Expansion\", true);\n  if (!Model) _missingMdxReference(\"Model\", true);\n  if (!Quote) _missingMdxReference(\"Quote\", true);\n  if (!Tab) _missingMdxReference(\"Tab\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Aphorism, {\n      children: \"只要有合适的美术资源和健壮的算法, 所有效果都能实现\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"非真实感渲染:\"\n    }), \"\\n\", _jsxs(Tab, {\n      children: [_jsx(Expansion, {\n        children: \"卡通风格\"\n      }), \":\", _jsxs(Tab, {\n        expan: true,\n        children: [\"主要分为以下步骤:\", _jsx(\"br\", {}), _jsx(Expansion, {\n          children: \"1. 渲染轮廓线\"\n        }), \":\", _jsxs(Tab, {\n          expan: true,\n          children: [\"基于观察角度和表面法线: 使用 视角方向•表面法线 来得到轮廓线. 尽管简单快速但收效甚微\", _jsx(\"br\", {}), \"过程式几何: 使用两个Pass渲染, 第一个渲染背面面片并保留轮廓, 第二个渲染正面. 尽管快速有效但只适用于表面平滑模型\", _jsx(\"br\", {}), \"基于图像处理: 使用深度纹理获取的轮廓. 尽管可以适用任何种类模型但变化小的轮廓无法被检测\", _jsx(\"br\", {}), \"基于边缘检测: 检查相邻面片之间是否满足 \", _jsx(Quote, {\n            id: \"#1\",\n            children: \"(n•v>0)!=(N•v>0)\"\n          }), \". 尽管可以控制轮廓线风格但逐帧之间不连贯\", _jsx(\"br\", {}), \"当然, 并不是非得分开才能实现, 可以组合使用.\"]\n        }), _jsx(Expansion, {\n          children: \"2. 添加高光\"\n        }), \":\", _jsxs(Tab, {\n          expan: true,\n          children: [\"卡通风格的高光往往是模型上分界明显的纯色区域\", _jsx(\"br\", {}), \"通常使用阈值控制高光反射系数, 并使用fwidth确定高光边缘宽度和smoothstep插值平滑高光边缘\"]\n        })]\n      }), _jsx(Expansion, {\n        children: \"手绘风格\"\n      }), \":\", _jsxs(Tab, {\n        expan: true,\n        children: [\"使用色调艺术映射(Tonal Art Map, TAM)的技术\", _jsx(\"br\", {}), \"使用多张由粗糙到细致的素描画来模拟不同光照的漫反射\", _jsx(\"br\", {}), \"参考论文: Real-time hatching, Illustrative rendering in Team Fortress等\"]\n      })]\n    }), \"\\n\", _jsx(\"p\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"噪声渲染:\"\n    }), \"\\n\", _jsxs(Tab, {\n      children: [\"著名噪声生成算法: Perlin噪声, Worley噪声\", _jsx(\"br\", {}), _jsx(Expansion, {\n        children: \"消融效果\"\n      }), \":\", _jsxs(Tab, {\n        expan: true,\n        children: [\"消融(dissolve): 从不同区域伪随机扩张, 到整个物体消失的效果\", _jsx(\"br\", {}), \"使用噪声纹理+透明度测试. 噪声纹理采样和阈值比较, 小于则clip掉为镂空区域, 边界则是使用颜色混合\"]\n      }), _jsx(Expansion, {\n        children: \"波纹反射\"\n      }), \":\", _jsxs(Tab, {\n        expan: true,\n        children: [\"在波纹效果中, 噪声纹理用作高度图, 修改水面法线方向.\", _jsx(\"br\", {}), \"通常使用菲涅尔反射来模拟光在水面的反射: fresnel = pow(1-max(0, v•n), 4)\"]\n      })]\n    }), \"\\n\", _jsx(\"p\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"基于物理的渲染:\"\n    }), \"\\n\", _jsxs(Tab, {\n      children: [_jsx(Expansion, {\n        children: \"理论基础\"\n      }), \":\", _jsxs(Tab, {\n        expan: true,\n        children: [\"基于物理的渲染(Physically Based Shading, PBS): 目的在于对光影和材质之间进行更真实的建模\", _jsx(\"br\", {}), \"物体不是完全光滑, 因此光经过散射和吸收会产生二次甚至多次散射和吸收, 这些光称为次表面散射光(subsurface-scattered light)\", _jsx(\"br\", {}), \"要得到次表面散射效果, 就需要被称为是次表面散射渲染技术的特殊模型\\n\", _jsx(Expansion, {\n          children: \"双向反射分布 BRDF\"\n        }), \":\", _jsxs(Tab, {\n          expan: true,\n          children: [\"双向反射分布(Bidirectional Reflectance Distribution Function, BRDF): 用于定量分析物体表面的对光入射和出射辐射率的影响\", _jsx(\"br\", {}), \"常用 f(I,v) 表示. I为入射方向, v为出射方向. 若绕表面法线旋转I或v不影响其结果, 则是各向同性(isotropic)的BRDF\", _jsx(\"br\", {}), \"当给定入射角度, BRDF给出所有出射方向的反射和散射光线的相对分布情况\", _jsx(\"br\", {}), \"当给定出射方向, BRDF给出所有入射方向到该出射方向的分布\", _jsx(\"br\", {}), \"BRDF满足: f(I, v) = f(v, I); 表面反射能量不超过入射光能\", _jsx(\"br\", {}), \"由BRDF, 得基于物理渲染技术中的\", _jsx(Model, {\n            about: \"@1\",\n            children: \"反射等式.\"\n          }), _jsx(\"br\", {}), \"BRDF可用于描述两种物理现象: 表面反射和次表面散射\", _jsx(\"br\", {}), \"而描述表面反射的称为高光反射项(specular term); 描述次表面散射的称为漫反射项(diffuse term)\"]\n        })]\n      }), _jsx(Expansion, {\n        children: \"高光和漫反射项\"\n      }), \":\", _jsxs(Tab, {\n        expan: true,\n        children: [_jsx(Model, {\n          about: \"@2\",\n          children: \"漫反射项\"\n        }), \":\", _jsx(\"br\", {}), _jsx(Model, {\n          about: \"@3\",\n          children: \"高光反射项\"\n        }), \":\", _jsx(\"br\", {}), _jsx(Model, {\n          about: \"@4\",\n          children: \"unity的PBS\"\n        }), \":\"]\n      }), _jsx(Expansion, {\n        children: \"Standard Shader\"\n      }), \":\", _jsxs(Tab, {\n        expan: true,\n        children: [\"Standard Shader: 是unity提供的现成的PBS\", _jsx(\"br\", {}), \"分为两类: 金属工作流和高光反射流. 两类都能实现相同的效果, 只是参数不同\", _jsx(\"br\", {}), \"金属反射流(Metallic workflow)可定义材质是的金属值.\", _jsx(\"br\", {}), \"高光反射流(Specular workflow)可定义材质的高光反射颜色\", _jsx(\"br\", {}), \"除此以外, unity还使用\", _jsx(Quote, {\n          id: \"#3\",\n          children: \"全局光照流水线\"\n        }), \"(Global Illumination, GI)来模拟光线如何传播如何反射, 实现间接光照\", _jsx(\"br\", {}), \"以及使用\", _jsx(Quote, {\n          id: \"#2\",\n          children: \"反射探针技术\"\n        }), \"(探针触发采样并保存反射图像)来反射场景\"]\n      }), _jsx(Expansion, {\n        children: \"HDR\"\n      }), \":\", _jsxs(Tab, {\n        expan: true,\n        children: [\"HDR(High Dynamic Range): 高动态范围. 与之相对的是低动态范围(Low Dynamic Range, LDR)\", _jsx(\"br\", {}), \"动态范围就是指最高亮度和最低亮度之间的比值.\", _jsx(\"br\", {}), \"HDR使用32位而不是传统的8位来存储颜色的亮度信息, 从而反映更真实的光照\", _jsx(\"br\", {}), \"使用HDR存储的图像被称为高动态范围图像(HDRI).\", _jsx(\"br\", {}), \"尽管显示器是LDR, 但使用色调映射技术(tonemapping)可以控制转换, 使得图像更加细腻\"]\n      }), _jsx(Expansion, {\n        children: \"伽马校正\"\n      }), \":\", _jsxs(Tab, {\n        expan: true,\n        children: [\"人眼对于暗部的变化更为敏感. 因此对拍摄图像使用 Out = In^γ 的伽马曲线来进行伽马编码(gamma encoding), 保留暗部舍弃亮部\", _jsx(\"br\", {}), \"显示器的物理特性又使得显示伽马(display gamma)\", _jsx(Quote, {\n          id: \"#4\",\n          children: \"正好是伽马编码的倒数\"\n        }), \", 因此显示的基本就是拍摄的原图\", _jsx(\"br\", {}), \"但正是因为如此, 由于图像处理软件没有伽马编码, unity中默认为伽马空间, 将自动作伽马曲线的图像处理, 使得图像偏暗.\", _jsx(\"br\", {}), \"因此需要伽马校正(gamma correction)RGB(A不用伽马): 将伽马空间映射到线性空间 Out = In\"]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  frontmatter,\n  QuoteList,\n  ImgList,\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","toc":[]},"overview":[{"length":22,"name":"archive"},{"length":15,"name":"graphics"},{"length":1,"name":"math"},{"length":8,"name":"network"}]},"__N_SSG":true}