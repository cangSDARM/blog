{"componentChunkName":"component---src-templates-graphics-js","path":"/graphics/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar QuoteList = ['\"数据总线\"是用于在多个设备间传输数据的通道. \"端口\"是用于在两个设备间传输数据的通道, 总线和端口将功能模块粘结在一起', \"视锥裁剪(Frustum Culling)在视锥(viewing frustum)中运行并非易事, 因此放在规范立方体(Canonical view volume, CVV 一个单位立方体)中经行\", \"Object space --> World space 转换: 通常称为world matrix来转换\", \"World space --> View space 转换: GPU运算\", \"View space --> Project space 转换: 1. 用透视变换将顶点变换到CVV中; 2. 在CVV中经行视锥裁剪; 3. 将坐标映射到屏幕坐标系\", '意味着无法获取例如\"是否是同一网格\"之类的信息, 但同时GPU可以并行处理', \"齐次裁剪坐标也就是CVV坐标. 需要注意的是其深度值Z, 在OpenGL和Unity中, 范围是[-1, 1]; 而Direct中, 范围是[0, 1]\", \"关于c++视锥裁剪算法请参考: OGRE(Object-Oriented Graphics Rendering Engine)的源码\", \"这一阶段也被称为扫描变换(Scan Conversion)\", \"由于后置测试中被舍弃的片元会浪费前面的性能, 因此GPU通常会判断片元着色器和提前测试(Early-Z)是否冲突来决定是否使用提前测试. 如果冲突将禁用提前测试开启后置测试\", \"在OpenGL中是glDrawElements, DirectX中是DrawIndexedPrimitive\", \"现代渲染管线也称为可编程管线. 在较旧的GPU上称为固定函数流水线(Fixed-Function Pipeline), 这是一种配置管线(只提供开关功能)\", \"此部分内容会在第四部分(编写shader的数学基础)中完整叙述\"];\nvar _frontmatter = {\n  \"title\": \"Graphics Programming(一) —— 渲染流水线\",\n  \"tags\": [\"graphics\", \"index\"],\n  \"index\": 1\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Quote = makeShortcode(\"Quote\");\nvar Tab = makeShortcode(\"Tab\");\nvar Anchor = makeShortcode(\"Anchor\");\nvar Expansion = makeShortcode(\"Expansion\");\nvar Table = makeShortcode(\"Table\");\nvar layoutProps = {\n  QuoteList: QuoteList,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"Quote-id12现代渲染管线Quote分为三个主要阶段\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(Quote, {\n    id: \"#12\",\n    mdxType: \"Quote\"\n  }, \"\\u73B0\\u4EE3\\u6E32\\u67D3\\u7BA1\\u7EBF\"), \"\\u5206\\u4E3A\\u4E09\\u4E2A\\u4E3B\\u8981\\u9636\\u6BB5:\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#Quote-id12%E7%8E%B0%E4%BB%A3%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BFQuote%E5%88%86%E4%B8%BA%E4%B8%89%E4%B8%AA%E4%B8%BB%E8%A6%81%E9%98%B6%E6%AE%B5\",\n    \"aria-label\": \"Quote id12现代渲染管线Quote分为三个主要阶段 permalink\",\n    \"className\": \"anchor after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"br\", null), mdx(Tab, {\n    mdxType: \"Tab\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%98%B6%E6%AE%B5:\"\n  }, \"\\u5E94\\u7528\\u7A0B\\u5E8F\\u9636\\u6BB5\"), \" --> \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#%E5%87%A0%E4%BD%95%E9%98%B6%E6%AE%B5:\"\n  }, \"\\u51E0\\u4F55\\u9636\\u6BB5\"), \" --> \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#%E5%85%89%E6%A0%85%E9%98%B6%E6%AE%B5:\"\n  }, \"\\u5149\\u6805\\u9636\\u6BB5\")), mdx(\"br\", null), mdx(Anchor, {\n    mdxType: \"Anchor\"\n  }, \"\\u5E94\\u7528\\u7A0B\\u5E8F\\u9636\\u6BB5:\"), mdx(Tab, {\n    mdxType: \"Tab\"\n  }, mdx(\"p\", null, \"\\u4E3B\\u8981\\u548CCPU,\\u5185\\u5B58\\u6253\\u4EA4\\u9053. \\u8BE5\\u9636\\u6BB5\\u672B\\u7AEF, \\u6E32\\u67D3\\u6240\\u9700\\u7684\\u6570\\u636E(\\u6E32\\u67D3\\u56FE\\u5143rendering primitives)\\u901A\\u8FC7\", mdx(Quote, {\n    id: \"#1\",\n    mdxType: \"Quote\"\n  }, \"\\u6570\\u636E\\u603B\\u7EBF\"), \"\\u4F20\\u9001\\u5230GPU\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u5C06\\u6E32\\u67D3\\u56FE\\u5143\\u8BFB\\u53D6\\u5230\\u663E\\u5B58\\u4E2D: \\u4ECE\\u786C\\u76D8HDD --> \\u5185\\u5B58RAM --> \\u663E\\u5B58VRAM\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u786E\\u5B9A\\u7F51\\u683C\\u600E\\u6837\\u88AB\\u6E32\\u67D3\"), mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u5728Unity\\u4E2D, \\u901A\\u5E38\\u662F\\u4F7F\\u7528MeshRender\\u6765\\u5C06\\u4FE1\\u606F\\u4F20\\u9012\\u7ED9GPU.\", mdx(\"br\", null), \"\\u7279\\u522B\\u7684, \\u57283D\\u6A21\\u578B\\u4E2D:\", mdx(Tab, {\n    mdxType: \"Tab\"\n  }, \"skin mesh render: \\u5E26\\u8499\\u76AE\\u7684\\u9AA8\\u9ABC\", mdx(\"br\", null), \"mesh filter/ mesh render: \\u5C06\\u54EA\\u4E2Amesh\\u4FE1\\u606F\\u4F20\\u9012\\u7ED9GPU/ \\u6CA1\\u6709\\u9AA8\\u9ABC\\u7684\\u6A21\\u578B\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, mdx(Quote, {\n    id: \"#11\",\n    mdxType: \"Quote\"\n  }, \"\\u8C03\\u7528Draw Call\")), \": CPU \\u901A\\u77E5 GPU \\u6E32\\u67D3\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"CPU\\u5411\\u4E00\\u4E2A\\u961F\\u5217\\\"\\u547D\\u4EE4\\u7F13\\u51B2\\u533A\\\"push\\u547D\\u4EE4, \\u800CGPU\\u4ECE\\u5176\\u4E2Dpull\\u547D\\u4EE4. \\u8FD9\\u6837\\u5B9E\\u73B0\\u4E86CPU\\u548CGPU\\u7684\\u5E76\\u884C\\u5DE5\\u4F5C\", mdx(\"br\", null), \"\\u901A\\u5E38\\u6027\\u80FD\\u7684\\u4F18\\u5316\\u90FD\\u4F1A\\u51CF\\u5C11Draw Call\\u7684\\u4E2A\\u6570\")))), mdx(Anchor, {\n    mdxType: \"Anchor\"\n  }, \"\\u51E0\\u4F55\\u9636\\u6BB5:\"), mdx(Tab, {\n    mdxType: \"Tab\"\n  }, mdx(\"p\", null, \"\\u4E3B\\u8981\\u548CGPU\\u6253\\u4EA4\\u9053. \\u8BE5\\u9636\\u6BB5\\u672B\\u7AEF, \\u5F97\\u5230\\u7ECF\\u8FC7\\u53D8\\u6362\\u548C\\u6295\\u5F71\\u4E4B\\u540E\\u7684\\u9876\\u70B9\\u5750\\u6807, \\u989C\\u8272\\u53CA\\u7EB9\\u7406\\u5750\\u6807\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u9876\\u70B9\\u7740\\u8272\\u5668\"), \": \\u5B9E\\u73B0\\u9876\\u70B9\\u7A7A\\u95F4\\u53D8\\u6362, \\u9876\\u70B9\\u7740\\u8272, \\u5149\\u7167\\u7B49(\\u53EF\\u7F16\\u7A0B)\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u5B83\\u7684\\u8F93\\u5165\\u6765\\u81EA\\u4E8ECPU. \\u6BCF\\u4E2A\\u9876\\u70B9\\u90FD\\u4F1A\\u8C03\\u7528\\u4E00\\u6B21\\u9876\\u70B9\\u7740\\u8272\\u5668.\", mdx(\"br\", null), \"\\u9876\\u70B9\\u7740\\u8272\\u5668\\u672C\\u8EAB\\u672C\\u53EF\\u4EE5\\u521B\\u5EFA\\u548C\\u9500\\u6BC1\\u4EFB\\u4F55\\u9876\\u70B9, \\u800C\\u4E14\", mdx(Quote, {\n    id: \"#6\",\n    mdxType: \"Quote\"\n  }, \"\\u9876\\u70B9\\u9876\\u70B9\\u4E4B\\u95F4\\u662F\\u76F8\\u4E92\\u72EC\\u7ACB\\u7684\"), \".\", mdx(\"br\", null), \"\\u5B83\\u6700\\u57FA\\u672C\\u4E14\\u5FC5\\u987B\\u5B8C\\u6210\\u7684\\u5DE5\\u4F5C\\u662F: \\u5C06\\u9876\\u70B9\\u5750\\u6807\\u4ECE \\u6A21\\u578B\\u7A7A\\u95F4 \\u8F6C\\u6362\\u5230 \", mdx(Quote, {\n    id: \"#7\",\n    mdxType: \"Quote\"\n  }, \"\\u9F50\\u6B21\\u88C1\\u526A\\u5750\\u6807\\u7CFB\"), \" \\u4E0B\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u66F2\\u9762\\u7EC6\\u5206\\u7740\\u8272\\u5668\"), \": \\u7528\\u4E8E\\u7EC6\\u5206\\u56FE\\u5143(\\u53EF\\u9009\\u7740\\u8272\\u5668, \\u53EF\\u7F16\\u7A0B)\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u5F88\\u9057\\u61BE, \\u6B64\\u90E8\\u5206\\u5E76\\u6CA1\\u6709\\u5B66\\u5230.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u51E0\\u4F55\\u7740\\u8272\\u5668\"), \": \\u6267\\u884C\\u9010\\u56FE\\u5143\\u7684\\u7740\\u8272(Per-Primitive)\\u6216\\u4EA7\\u751F\\u66F4\\u591A\\u56FE\\u5143(\\u53EF\\u9009\\u7740\\u8272\\u5668, \\u53EF\\u7F16\\u7A0B)\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u5F88\\u9057\\u61BE, \\u6B64\\u90E8\\u5206\\u5E76\\u6CA1\\u6709\\u5B66\\u5230.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u88C1\\u526A\"), \":\", mdx(Quote, {\n    id: \"#2\",\n    mdxType: \"Quote\"\n  }, \"\\u89C6\\u9525\\u88C1\\u526A\"), \"(\\u53EF\\u914D\\u7F6E)\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u786E\\u8BA4\\u89C6\\u9525(\\u5373\\u9009\\u62E9\\u6295\\u5F71\\u7C7B\\u578B)\\u5E76\\u88C1\\u526A\", mdx(\"br\", null), \"\\u88C1\\u526A\\u5E76\\u4E0D\\u4E00\\u5B9A\\u662F\\u901A\\u8FC7GPU\\u6765\\u8FD0\\u7B97. \\u4E5F\\u53EF\\u4EE5\", mdx(Quote, {\n    id: \"#8\",\n    mdxType: \"Quote\"\n  }, \"\\u901A\\u8FC7CPU\\u8FD0\\u7B97\"), \"\\u540E\\u76F4\\u63A5\\u8DF3\\u8FC7\\u8BE5\\u6B65\\u9AA4.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u5C4F\\u5E55\\u6620\\u5C04\"), \": \\u5C06CVV \\u8F6C\\u6362\\u4E3AClip and Project space\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u5C4F\\u5E55\\u6620\\u5C04(Screen Mapping)\\u5E76\\u4E0D\\u4F1A\\u5904\\u7406\\u6DF1\\u5EA6\\u503CZ.\", mdx(\"br\", null), \"\\u503C\\u5F97\\u6CE8\\u610F\\u7684\\u662F, OpenGL\\u7684\\u5750\\u6807\\u7CFB\\u5C06\\\"\\u5C4F\\u5E55\\u7684\\u5DE6\\u4E0B\\u89D2\\\"\\u5F53\\u4F5C\\u539F\\u70B9(0,0); \\u800CDirectX\\u7684\\u5750\\u6807\\u7CFB\\u5C06\\\"\\u5C4F\\u5E55\\u7684\\u5DE6\\u4E0A\\u89D2\\\"\\u5F53\\u4F5C\\u539F\\u70B9(0,0)\"), \"\\u9644\\u5F55: \", mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, mdx(Quote, {\n    id: \"#13\",\n    mdxType: \"Quote\"\n  }, \"\\u5750\\u6807\\u7A7A\\u95F4\")), \": \\u4F9D\\u7167\\u5148\\u540E\\u987A\\u5E8F\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"Object space\\u7269\\u4F53\\u5750\\u6807\\u7CFB\", mdx(Quote, {\n    id: \"#3\",\n    mdxType: \"Quote\"\n  }, \"-->\"), \"World space\\u4E16\\u754C\\u5750\\u6807\\u7CFB\", mdx(Quote, {\n    id: \"#4\",\n    mdxType: \"Quote\"\n  }, \"-->\"), \"View space\\u89C2\\u5BDF\\u5750\\u6807\\u7CFB\", mdx(Quote, {\n    id: \"#5\",\n    mdxType: \"Quote\"\n  }, \"-->\"), \"Project space\\u5C4F\\u5E55\\u5750\\u6807\\u7CFB\", mdx(Table, {\n    mdxType: \"Table\"\n  }, [{\n    cells: [\"Object space\", \"模型建立时得到的坐标. 与其它物体没有任何参照关系\"],\n    component: ['th']\n  }, {\n    cells: [\"World space\", \"以一个固定的坐标原点经行参照确定物体位置\"],\n    component: ['th']\n  }, {\n    cells: [\"View space\", \"以Camera为原点, 组成的正交坐标系\"],\n    component: ['th']\n  }, {\n    cells: [\"Project space\", \"屏幕坐标系\"],\n    component: ['th']\n  }]))))), mdx(Anchor, {\n    mdxType: \"Anchor\"\n  }, \"\\u5149\\u6805\\u9636\\u6BB5:\"), mdx(Tab, {\n    mdxType: \"Tab\"\n  }, \"\\u57FA\\u4E8E\\u51E0\\u4F55\\u9636\\u6BB5\\u8F93\\u51FA\\u7684\\u6570\\u636E, \\u96FE\\u5316, \\u900F\\u660E\\u53CA\\u4E3Apixel\\u6B63\\u786E\\u914D\\u8272. \\u7ECF\\u884C\\u5355\\u4E2A\\u50CF\\u7D20\\u7684\\u64CD\\u4F5C, \\u6BCF\\u4E2Apixel\\u7684\\u4FE1\\u606F\\u5B58\\u50A8\\u5728\\u989C\\u8272\\u7F13\\u51B2\\u5668(color buffer \\u6216frame buffer)\\u4E2D\", mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u4E09\\u89D2\\u5F62\\u8BBE\\u7F6E\"), \": \\u8BA1\\u7B97\\u5149\\u6805\\u5316\\u4E00\\u4E2A\\u4E09\\u89D2\\u7F51\\u683C\\u6240\\u9700\\u7684\\u4FE1\\u606F\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u4E0A\\u4E00\\u9636\\u6BB5\\u8F93\\u51FA\\u7684\\u662F\\\"\\u4E09\\u89D2\\u7F51\\u683C\\u7684\\u9876\\u70B9\\\"\\u5373\\u6BCF\\u6761\\u8FB9\\u7684\\u4E24\\u4E2A\\u7AEF\\u70B9. \\u5982\\u679C\\u9700\\u8981\\u5F97\\u5230\\u4E09\\u89D2\\u7F51\\u683C\\u5BF9pixel\\u7684\\u8986\\u76D6\\u60C5\\u51B5, \\u9700\\u8981\\u8BA1\\u7B97\\u6BCF\\u6761\\u8FB9\\u7684\\u50CF\\u7D20\\u5750\\u6807.\", mdx(\"br\", null), \"\\u4E09\\u89D2\\u5F62\\u8BBE\\u7F6E(Triangle Setup)\\u901A\\u8FC7\\u8BA1\\u7B97\\u4E09\\u89D2\\u5F62\\u8FB9\\u754C\\u7684\\u8868\\u793A\\u5F62\\u5F0F\\u6765\\u786E\\u5B9A\\u6BCF\\u6761\\u8FB9\\u7684\\u5750\\u6807\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u4E09\\u89D2\\u5F62\\u904D\\u5386\"), mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, mdx(Quote, {\n    id: \"#9\",\n    mdxType: \"Quote\"\n  }, \"\\u4E09\\u89D2\\u5F62\\u904D\\u5386\"), \"(Triangle Traversal)\\u786E\\u5B9A\\u6BCF\\u4E2A\\u4E09\\u89D2\\u7F51\\u683C\\u6240\\u8986\\u76D6\\u7684pixel, \\u5E76\\u4F7F\\u7528\\u9876\\u70B9\\u4FE1\\u606F\\u5BF9\\u8986\\u76D6\\u533A\\u57DF\\u8FDB\\u884C\\u5DEE\\u503C\", mdx(\"br\", null), \"\\u904D\\u5386\\u5B8C\\u6210\\u540E\\u7684\\u8F93\\u51FA\\u5C31\\u79F0\\u4E4B\\u4E3A\\u7247\\u5143(fragment), \\u5305\\u542B\\u4E86\\u6DF1\\u5EA6\\u503CZ, \\u6CD5\\u7EBF, \\u7EB9\\u7406\\u7B49\\u4FE1\\u606F, \\u53EF\\u4EE5\\u8BF4\\u662F\\\"\\u6536\\u96C6\\u5B8C\\u5168\\u4F46\\u672A\\u8BA1\\u7B97\\u7684\\u50CF\\u7D20\\u4FE1\\u606F\\\"\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u7247\\u5143\\u7740\\u8272\\u5668\"), \": \\u5B9E\\u73B0\\u9010\\u7247\\u5143\\u7684\\u7740\\u8272(Per-Fragment)(\\u53EF\\u7F16\\u7A0B)\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u8FD9\\u4E00\\u9636\\u6BB5\\u5305\\u542B\\u8BB8\\u591A\\u7684\\u6E32\\u67D3\\u6280\\u672F. \\u6700\\u91CD\\u8981\\u7684\\u5C31\\u662F\\u7EB9\\u7406\\u91C7\\u6837(\\u5C06\\u8D34\\u56FE, \\u6CD5\\u7EBF\\u7B49\\u989C\\u8272\\u4FE1\\u606F\\u7ED9\\u7247\\u5143)\", mdx(\"br\", null), \"\\u4F46\\u5B83\\u4EC5\\u80FD\\u5F71\\u54CD\\u5355\\u4E2A\\u7247\\u5143, \\u65E0\\u6CD5\\u5C06\\u7ED3\\u679C\\u53D1\\u9001\\u7ED9\\u5B83\\u5468\\u56F4\\u7684pixel.(\\u6CD5\\u7EBF\\u4FE1\\u606F\\u9664\\u5916)\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u9010\\u7247\\u5143\\u64CD\\u4F5C\"), \": \\u7247\\u5143\\u7684\\u53EF\\u89C1\\u6027, \\u6DF1\\u5EA6\\u7F13\\u51B2, \\u989C\\u8272\\u6DF7\\u5408\\u7B49(\\u53EF\\u914D\\u7F6E)\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u5728OpenGL\\u4E2D\\u79F0\\u4E3A\\u9010\\u7247\\u5143\\u64CD\\u4F5C(Per-Fragment Operations), \\u5728DirectX\\u4E2D\\u79F0\\u4E3A\\u8F93\\u51FA\\u5408\\u5E76\\u9636\\u6BB5(Output-Merger)\", mdx(\"br\", null), \"\\u9700\\u8981\\u7ECF\\u8FC7\", mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, mdx(Quote, {\n    id: \"#10\",\n    mdxType: \"Quote\"\n  }, \"\\u4E24\\u4E2A\\u6D4B\\u8BD5\")), \", \\u6765\\u51B3\\u5B9A\\u7247\\u5143\\u7684\\u53EF\\u89C1\\u6027\\u95EE\\u9898\", mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u6A21\\u677F\\u6D4B\\u8BD5 --> \\u6DF1\\u5EA6\\u6D4B\\u8BD5\", mdx(Table, {\n    mdxType: \"Table\"\n  }, [{\n    cells: [\"模板测试\", \"通常用于限制渲染的区域. 也可以用来渲染阴影, 轮廓渲染等\"],\n    component: ['th']\n  }, {\n    cells: [\"深度测试\", \"通常用于视野深度计算\"],\n    component: ['th']\n  }])), \"\\u4E4B\\u540E\\u9700\\u8981\\u7ECF\\u884C\\u6DF7\\u5408(Blend)\\u64CD\\u4F5C, \\u51B3\\u5B9A\\u6B64\\u6B21\\u64CD\\u4F5C\\u548C\\u524D\\u4E00\\u6B21\\u64CD\\u4F5C\\u7684\\u5173\\u7CFB(\\u5B9E\\u73B0\\u4E0D\\u900F\\u660E(\\u5168\\u8986\\u76D6)\\u6216\\u534A\\u900F\\u660E(\\u5C40\\u90E8\\u8986\\u76D6))\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Expansion, {\n    mdxType: \"Expansion\"\n  }, \"\\u5C4F\\u5E55\\u56FE\\u50CF\"), mdx(Tab, {\n    expan: true,\n    mdxType: \"Tab\"\n  }, \"\\u4F7F\\u7528\\u901A\\u5E38\\u6240\\u8BF4\\u7684\\u53CC\\u7F13\\u51B2\\u6280\\u672F(Double Buffering). \\u524D\\u7F6E\\u7F13\\u51B2(front buffer)\\u548C\\u540E\\u7F6E\\u7F13\\u51B2(frame buffer|back buffer)\\u4EA4\\u66FF\\u663E\\u793A\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Graphics Programming(一) —— 渲染流水线","tags":["graphics","index"]},"fields":{"slug":"/graphics","templateTag":"graphics"},"exports":{"QuoteList":["\"数据总线\"是用于在多个设备间传输数据的通道. \"端口\"是用于在两个设备间传输数据的通道, 总线和端口将功能模块粘结在一起","视锥裁剪(Frustum Culling)在视锥(viewing frustum)中运行并非易事, 因此放在规范立方体(Canonical view volume, CVV 一个单位立方体)中经行","Object space --> World space 转换: 通常称为world matrix来转换","World space --> View space 转换: GPU运算","View space --> Project space 转换: 1. 用透视变换将顶点变换到CVV中; 2. 在CVV中经行视锥裁剪; 3. 将坐标映射到屏幕坐标系","意味着无法获取例如\"是否是同一网格\"之类的信息, 但同时GPU可以并行处理","齐次裁剪坐标也就是CVV坐标. 需要注意的是其深度值Z, 在OpenGL和Unity中, 范围是[-1, 1]; 而Direct中, 范围是[0, 1]","关于c++视锥裁剪算法请参考: OGRE(Object-Oriented Graphics Rendering Engine)的源码","这一阶段也被称为扫描变换(Scan Conversion)","由于后置测试中被舍弃的片元会浪费前面的性能, 因此GPU通常会判断片元着色器和提前测试(Early-Z)是否冲突来决定是否使用提前测试. 如果冲突将禁用提前测试开启后置测试","在OpenGL中是glDrawElements, DirectX中是DrawIndexedPrimitive","现代渲染管线也称为可编程管线. 在较旧的GPU上称为固定函数流水线(Fixed-Function Pipeline), 这是一种配置管线(只提供开关功能)","此部分内容会在第四部分(编写shader的数学基础)中完整叙述"],"ImgList":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/graphics"},"frontmatter":{"title":"Graphics Programming(一) —— 渲染流水线","index":1}}},{"node":{"fields":{"slug":"/graphics/priorKnowledge"},"frontmatter":{"title":"Graphics Programming(二) —— 前置知识","index":2}}},{"node":{"fields":{"slug":"/graphics/mathematicalBasis"},"frontmatter":{"title":"Graphics Programming(三) —— 编写shader的数学基础","index":3}}},{"node":{"fields":{"slug":"/graphics/mathematicalBasis/innerMatrix"},"frontmatter":{"title":"内置的变量: inner matrix","index":3.1}}},{"node":{"fields":{"slug":"/graphics/shaderSyntax"},"frontmatter":{"title":"Graphics Programming(四) —— Shader语法","index":4}}},{"node":{"fields":{"slug":"/graphics/shaderSyntax/shader1.0"},"frontmatter":{"title":"固定函数着色器: Fixed Function Shader","index":4.1}}},{"node":{"fields":{"slug":"/graphics/shaderSyntax/shader2.0"},"frontmatter":{"title":"顶点/片元着色器: Vertex/Fragment Shader","index":4.2}}},{"node":{"fields":{"slug":"/graphics/shaderSyntax/shader3.0"},"frontmatter":{"title":"表面着色器: Surface Shader","index":4.3}}},{"node":{"fields":{"slug":"/graphics/shaderSyntax/shaderLab&CG"},"frontmatter":{"title":"shaderLab和CG的联系与区别","index":4.4}}},{"node":{"fields":{"slug":"/graphics/illumination"},"frontmatter":{"title":"Graphics Programming(五) —— 光照","index":5}}},{"node":{"fields":{"slug":"/graphics/texture"},"frontmatter":{"title":"Graphics Programming(六) —— 纹理","index":6}}},{"node":{"fields":{"slug":"/graphics/transparency"},"frontmatter":{"title":"Graphics Programming(七) —— 透明效果","index":7}}},{"node":{"fields":{"slug":"/graphics/simpleAnimation"},"frontmatter":{"title":"Graphics Programming(八) —— 简单动画","index":8}}},{"node":{"fields":{"slug":"/graphics/post-processing"},"frontmatter":{"title":"Graphics Programming(九) —— 后期处理效果","index":9}}},{"node":{"fields":{"slug":"/graphics/particularRendering"},"frontmatter":{"title":"Graphics Programming(十) —— 特殊渲染","index":10}}}]}},"pageContext":{"frontmatter":{"title":"Graphics Programming(一) —— 渲染流水线","tags":["graphics","index"],"index":1},"title":"Graphics Programming(一) —— 渲染流水线","date":null,"slug":"/graphics","genByTemplate":"graphics"}},"staticQueryHashes":["1663153949","3649515864","49750724","63159454"]}