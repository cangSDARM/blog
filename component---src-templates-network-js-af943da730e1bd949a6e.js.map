{"version":3,"sources":["webpack://gatsby-website/./src/components/indexing/index.js","webpack://gatsby-website/./src/templates/network.js","webpack://gatsby-website/./src/components/network/style.module.css"],"names":["ensureExist","element","fields","slug","frontmatter","title","index","maxLength","text","maximum","res","substr","length","Math","max","Indexing","data","otherProps","node","findIndex","Array","from","filter","toString","indexOf","jumpNonNavigable","previous","getPrevious","next","getNext","style","width","display","justifyContent","Link","to","name","PropType","shotCodes","h3","props","margin","blockquote","className","Template","mdx","headerIamge","allMdx","body","templateTag","header","backgroundImage","getSrc","childImageSharp","backgroundSize","config","titleTemplate","maxWidth","fontFamily","fontSize","edges","tags","MDXProvider","components","MDXRenderer"],"mappings":"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","file":"component---src-templates-network-js-af943da730e1bd949a6e.js","sourcesContent":["import { Link } from \"gatsby\";\nimport React from \"react\";\nimport PropType from \"prop-types\";\n\nfunction findIndex(data, slug) {\n  let element;\n  if (data)\n    for (element of data) {\n      const { node } = element;\n      if (slug === node?.fields?.slug) {\n        return node?.frontmatter?.index - 1;\n      }\n    }\n  return -1;\n}\n\n/**\n * Skip elements without integer index\n * @param {Array} data\n */\nfunction jumpNonNavigable(data) {\n  return Array.from(data).filter(\n    (element) => element?.node?.frontmatter?.index?.toString().indexOf(\".\") < 0\n  );\n}\n\nfunction getPrevious(data, index) {\n  if (data) return data[index - 1]?.node;\n  return undefined;\n}\n\nfunction getNext(data, index) {\n  if (data) return data[index + 1]?.node;\n  return undefined;\n}\n\nfunction ensureExist(\n  element = {\n    fields: {\n      slug: \"/\",\n    },\n    frontmatter: {\n      title: \"首页\",\n      index: -1,\n    },\n  }\n) {\n  return element;\n}\n\nfunction maxLength(text, maximum = 10) {\n  let res = text.substr(0, maximum);\n  if (text.length > maximum) {\n    res += \"...\";\n    res += text.substr(Math.max(res.length + 6, text.length - maximum));\n  }\n  return res;\n}\n\nconst Indexing = ({ slug, data, ...otherProps }) => {\n  data = jumpNonNavigable(data);\n  const index = findIndex(data, slug);\n  const previous = ensureExist(getPrevious(data, index));\n  const next = ensureExist(getNext(data, index));\n\n  return (\n    index > -1 && (\n      <div\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n        {...otherProps}\n      >\n        <Link to={previous.fields.slug} name=\"previous\">\n          {`<-`}\n          {maxLength(previous.frontmatter.title)}\n          {`-`}\n        </Link>\n        <Link to={next?.fields?.slug} name=\"previous\">\n          {`-`}\n          {maxLength(next?.frontmatter?.title)}\n          {` ->`}\n        </Link>\n      </div>\n    )\n  );\n};\n\nIndexing.PropType = {\n  data: PropType.array,\n  slug: PropType.string,\n};\n\nexport default Indexing;\n","import { MDXProvider } from \"@mdx-js/react\";\nimport { graphql } from \"gatsby\";\nimport { getSrc } from \"gatsby-plugin-image\";\nimport { MDXRenderer } from \"gatsby-plugin-mdx\";\nimport React from \"react\";\nimport Indexing from \"../components/indexing\";\nimport Layout from \"../components/layout\";\nimport * as styles from \"../components/network/style.module.css\";\nimport SEO from \"../components/seo\";\nimport TagsList from \"../components/tag-lists\";\n\nconst shotCodes = {\n  h3: (props) => <h3 style={{ margin: `20px 0 10px` }} {...props} />,\n  // p: props => <p className={styles.cp} {...props} />,\n  blockquote: (props) => (\n    <blockquote className={styles.cblockquote} {...props} />\n  ),\n};\n\nexport default function Template({ data }) {\n  const { mdx, headerIamge, allMdx } = data;\n  const { frontmatter, body, fields } = mdx;\n  let title =\n    fields.slug === `/${fields.templateTag}`\n      ? `Network-Top2Down`\n      : frontmatter.title;\n  return (\n    <Layout\n      header={{\n        style: {\n          backgroundImage: `url(${getSrc(headerIamge.childImageSharp)})`,\n          backgroundSize: `cover`,\n        },\n      }}\n    >\n      <SEO\n        title={title}\n        config={{\n          titleTemplate:\n            fields.slug === `/${fields.templateTag}`\n              ? `%s`\n              : `%s | Network-Top2Down`,\n        }}\n      ></SEO>\n      <div\n        className={styles.netPost}\n        style={{\n          maxWidth: `960px`,\n          fontFamily: `YaHei, Helvetica, arial, sans-serif`,\n          fontSize: `16px`,\n        }}\n      >\n        <h1>{frontmatter.title}</h1>\n        <Indexing slug={fields.slug} data={allMdx?.edges} />\n        <TagsList tags={frontmatter.tags} />\n        {/* <TagsList tags={post.frontmatter.tags} /> */}\n        <MDXProvider components={shotCodes}>\n          <MDXRenderer>{body}</MDXRenderer>\n        </MDXProvider>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query ($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      body\n      frontmatter {\n        tags\n        title\n      }\n      fields {\n        slug\n        templateTag\n      }\n    }\n\n    allMdx(\n      sort: { fields: [frontmatter___index, fileAbsolutePath], order: ASC }\n      filter: { frontmatter: { tags: { in: [\"network\"] } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            index\n          }\n        }\n      }\n    }\n\n    headerIamge: file(relativePath: { eq: \"network-logo.png\" }) {\n      childImageSharp {\n        gatsbyImageData(formats: [AUTO, WEBP], quality: 100)\n      }\n    }\n  }\n`;\n","// extracted by mini-css-extract-plugin\nexport var netPost = \"style-module--netPost--3ipfI\";\nexport var cblockquote = \"style-module--cblockquote--3dEHt\";"],"sourceRoot":""}