{"version":3,"file":"component---src-templates-network-js-5b2d04fc58e762557d62.js","mappings":"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","sources":["webpack://gatsby-blog/./src/templates/network.js","webpack://gatsby-blog/./src/components/network/style.module.css","webpack://gatsby-blog/./src/components/indexing/index.tsx"],"sourcesContent":["import { MDXProvider } from \"@mdx-js/react\";\nimport { graphql } from \"gatsby\";\nimport { getSrc } from \"gatsby-plugin-image\";\nimport { MDXRenderer } from \"gatsby-plugin-mdx\";\nimport React from \"react\";\nimport Indexing from \"../components/indexing\";\nimport Layout from \"../components/layout\";\nimport * as styles from \"../components/network/style.module.css\";\nimport SEO from \"../components/seo\";\nimport TagsList from \"../components/tag-lists\";\n\nconst shotCodes = {\n  h3: (props) => <h3 style={{ margin: `20px 0 10px` }} {...props} />,\n  // p: props => <p className={styles.cp} {...props} />,\n  blockquote: (props) => (\n    <blockquote className={styles.cblockquote} {...props} />\n  ),\n};\n\nexport default function Template({ data }) {\n  const { mdx, headerIamge, allMdx } = data;\n  const { frontmatter, body, fields } = mdx;\n  let title =\n    fields.slug === `/${fields.templateTag}`\n      ? `Network-Top2Down`\n      : frontmatter.title;\n  return (\n    <Layout\n      header={{\n        style: {\n          backgroundImage: `url(${getSrc(headerIamge.childImageSharp)})`,\n          backgroundSize: `cover`,\n        },\n      }}\n    >\n      <SEO\n        title={title}\n        config={{\n          titleTemplate:\n            fields.slug === `/${fields.templateTag}`\n              ? `%s`\n              : `%s | Network-Top2Down`,\n        }}\n      ></SEO>\n      <div\n        className={styles.netPost}\n        style={{\n          maxWidth: `960px`,\n          fontFamily: `YaHei, Helvetica, arial, sans-serif`,\n          fontSize: `16px`,\n        }}\n      >\n        <h1>{frontmatter.title}</h1>\n        <Indexing slug={fields.slug} data={allMdx?.edges} />\n        <TagsList tags={frontmatter.tags} />\n        {/* <TagsList tags={post.frontmatter.tags} /> */}\n        <MDXProvider components={shotCodes}>\n          <MDXRenderer>{body}</MDXRenderer>\n        </MDXProvider>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query ($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      body\n      frontmatter {\n        tags\n        title\n      }\n      fields {\n        slug\n        templateTag\n      }\n    }\n\n    allMdx(\n      sort: { fields: [frontmatter___index, fileAbsolutePath], order: ASC }\n      filter: { frontmatter: { tags: { in: [\"network\"] } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            index\n          }\n        }\n      }\n    }\n\n    headerIamge: file(relativePath: { eq: \"network-logo.png\" }) {\n      childImageSharp {\n        gatsbyImageData(formats: [AUTO, WEBP], quality: 100)\n      }\n    }\n  }\n`;\n","// extracted by mini-css-extract-plugin\nexport var cblockquote = \"style-module--cblockquote--MD4aw\";\nexport var netPost = \"style-module--netPost--RwpWE\";","import { Link } from \"gatsby\";\nimport React from \"react\";\n\nfunction findIndex(data: any | undefined, slug: string) {\n  let element;\n  if (data)\n    for (element of data) {\n      const { node } = element;\n      if (slug === node?.fields?.slug) {\n        return node?.frontmatter?.index - 1;\n      }\n    }\n  return -1;\n}\n\n/**\n * Skip elements without integer index\n * @param {Array} data\n */\nfunction jumpNonNavigable(data: any[]) {\n  return Array.from(data).filter(\n    (element) => element?.node?.frontmatter?.index?.toString().indexOf(\".\") < 0\n  );\n}\n\nfunction getPrevious(data: any[], index: number) {\n  if (data) return data[index - 1]?.node;\n  return undefined;\n}\n\nfunction getNext(data: any[], index: number) {\n  if (data) return data[index + 1]?.node;\n  return undefined;\n}\n\nfunction ensureExist(\n  element = {\n    fields: {\n      slug: \"/\",\n    },\n    frontmatter: {\n      title: \"首页\",\n      index: -1,\n    },\n  }\n) {\n  return element;\n}\n\nfunction maxLength(text: string, maximum = 10) {\n  let res = text.substr(0, maximum);\n  if (text.length > maximum) {\n    res += \"...\";\n    res += text.substr(Math.max(res.length + 6, text.length - maximum));\n  }\n  return res;\n}\n\nconst Indexing: React.FC<{ slug: string; data: any[] }> = ({\n  slug,\n  data,\n  ...otherProps\n}) => {\n  data = jumpNonNavigable(data);\n  const index = findIndex(data, slug);\n  const previous = ensureExist(getPrevious(data, index));\n  const next = ensureExist(getNext(data, index));\n\n  return index > -1 ? (\n    <div\n      style={{\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n      }}\n      {...otherProps}\n    >\n      {/** @ts-ignore */}\n      <Link to={previous.fields.slug} name=\"previous\">\n        {`<-`}\n        {maxLength(previous.frontmatter.title)}\n        {`-`}\n      </Link>\n      {/** @ts-ignore */}\n      <Link to={next?.fields?.slug} name=\"previous\">\n        {`-`}\n        {maxLength(next?.frontmatter?.title)}\n        {` ->`}\n      </Link>\n    </div>\n  ) : (\n    <></>\n  );\n};\n\nexport default Indexing;\n"],"names":["shotCodes","h3","props","style","margin","blockquote","className","Template","data","mdx","headerIamge","allMdx","frontmatter","body","fields","title","slug","templateTag","header","backgroundImage","getSrc","childImageSharp","backgroundSize","config","titleTemplate","maxWidth","fontFamily","fontSize","edges","tags","MDXProvider","components","MDXRenderer","ensureExist","element","index","maxLength","text","maximum","res","substr","length","Math","max","otherProps","node","findIndex","Array","from","filter","toString","indexOf","jumpNonNavigable","previous","getPrevious","next","getNext","width","display","justifyContent","Link","to","name"],"sourceRoot":""}