{"componentChunkName":"component---src-templates-graphics-js","path":"/graphics/mathematicalBasis/innerMatrix/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"内置的变量: inner matrix\",\n  \"tags\": [\"graphics\"],\n  \"index\": 3.1\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Navigation = makeShortcode(\"Navigation\");\nvar Table = makeShortcode(\"Table\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Navigation, {\n    desc: \"\\u8FD4\\u56DE\",\n    to: \"./\",\n    mdxType: \"Navigation\"\n  }), mdx(\"p\", null, \"-\", \"-------------------------------------------------------------------------------------------------------\"), mdx(\"p\", null, \"-----------------------------------UNITY_MATRIX_MV\\u53CA\\u5176\\u76F8\\u5173\\u77E9\\u9635\\u9700\\u8981\\u7279\\u522B\\u7559\\u610F----------------------------------\"), mdx(Table, {\n    title: \"\\u5185\\u7F6E\\u7684\\u53D8\\u6362\\u77E9\\u9635\",\n    mdxType: \"Table\"\n  }, [{\n    cells: [\"UNITY_MATRIX_MVP\", \"模型->世界->观察->裁剪的矩阵\"],\n    component: ['th']\n  }, {\n    cells: [\"UNITY_MATRIX_MV\", \"模型->世界->观察的矩阵\"],\n    component: ['th']\n  }, {\n    cells: [\"UNITY_MATRIX_V\", \"世界->观察的矩阵\"],\n    component: ['th']\n  }, {\n    cells: [\"UNITY_MATRIX_P\", \"观察->裁剪的矩阵\"],\n    component: ['th']\n  }, {\n    cells: [\"UNITY_MATRIX_VP\", \"世界->观察->裁剪的矩阵\"],\n    component: ['th']\n  }, {\n    cells: [\"UNITY_MATRIX_T_MV\", \"UNITY_MATRIX_MV的转置矩阵\"],\n    component: ['th']\n  }, {\n    cells: [\"UNITY_MATRIX_IT_MV\", \"UNITY_MATRIX_MV的逆转置矩阵(可以用于得到UNITY_MATRIX_MV的逆矩阵\\n 法线从模型->世界->观察的矩阵\"],\n    component: ['th']\n  }, {\n    cells: [\"_Object2World\", \"模型->世界的矩阵\"],\n    component: ['th']\n  }, {\n    cells: [\"_World2Object\", \"_Object2World的逆矩阵. 世界->模型的矩阵\"],\n    component: ['th']\n  }]), mdx(\"p\", null, \"-\", \"-------------------------------------------------------------------------------------------------------\"), mdx(Table, {\n    title: \"\\u6444\\u50CF\\u673A\\u53CA\\u5C4F\\u5E55\\u53C2\\u6570\",\n    mdxType: \"Table\"\n  }, [{\n    cells: [\"_WorldSpaceCameraPos\", \"float3\", \"摄像机在世界空间中的位置\"],\n    component: ['th']\n  }, {\n    cells: [\"_ProjectionParams\", \"float4\", \"x=±1, y=Near, z=Far, w=1.0+1.0/Far\"],\n    component: ['th']\n  }, {\n    cells: [\"_ScreenParams\", \"float4\", \"x=width, y=height, z=1.0+1.0/width, w=1.0+1.0/height\"],\n    component: ['th']\n  }, {\n    cells: [\"_ZBufferParams\", \"float4\", \"x=1-Far/Near, y=Far/Near, z=x/Far, w=y/Far, 用于线性化Z缓存的深度值\"],\n    component: ['th']\n  }, {\n    cells: [\"unity_OrthoParams\", \"float4\", \"x=width, y=height, z没有定义, w=1.0(正交)|0.0(透视)\"],\n    component: ['th']\n  }, {\n    cells: [\"unity_CameraProjection\", \"float4×4\", \"摄像机的投影矩阵\"],\n    component: ['th']\n  }, {\n    cells: [\"unity_CameraInvProjection\", \"float4×4\", \"摄像机的投影矩阵的逆矩阵\"],\n    component: ['th']\n  }, {\n    cells: [\"unity_CameraWorldClipPlanes[6]\", \"float4\", \"摄像机的6个裁剪平面在世界空间下的等式, 按: 左右下上近远\"],\n    component: ['th']\n  }]), mdx(\"p\", null, \"-\", \"-------------------------------------------------------------------------------------------------------\"), mdx(\"p\", null, \"2017\\u540E\\u7248\\u672C\\u53D8\\u5316:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"replaced '_World2Object' with 'unity_WorldToObject'\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"内置的变量: inner matrix","tags":["graphics"]},"fields":{"slug":"/graphics/mathematicalBasis/innerMatrix","templateTag":"graphics"},"exports":{"QuoteList":null,"ImgList":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/graphics"},"frontmatter":{"title":"Graphics Programming(一) —— 渲染流水线","index":1}}},{"node":{"fields":{"slug":"/graphics/priorKnowledge"},"frontmatter":{"title":"Graphics Programming(二) —— 前置知识","index":2}}},{"node":{"fields":{"slug":"/graphics/mathematicalBasis"},"frontmatter":{"title":"Graphics Programming(三) —— 编写shader的数学基础","index":3}}},{"node":{"fields":{"slug":"/graphics/mathematicalBasis/innerMatrix"},"frontmatter":{"title":"内置的变量: inner matrix","index":3.1}}},{"node":{"fields":{"slug":"/graphics/shaderSyntax"},"frontmatter":{"title":"Graphics Programming(四) —— Shader语法","index":4}}},{"node":{"fields":{"slug":"/graphics/shaderSyntax/shader1.0"},"frontmatter":{"title":"固定函数着色器: Fixed Function Shader","index":4.1}}},{"node":{"fields":{"slug":"/graphics/shaderSyntax/shader2.0"},"frontmatter":{"title":"顶点/片元着色器: Vertex/Fragment Shader","index":4.2}}},{"node":{"fields":{"slug":"/graphics/shaderSyntax/shader3.0"},"frontmatter":{"title":"表面着色器: Surface Shader","index":4.3}}},{"node":{"fields":{"slug":"/graphics/shaderSyntax/shaderLab&CG"},"frontmatter":{"title":"shaderLab和CG的联系与区别","index":4.4}}},{"node":{"fields":{"slug":"/graphics/illumination"},"frontmatter":{"title":"Graphics Programming(五) —— 光照","index":5}}},{"node":{"fields":{"slug":"/graphics/texture"},"frontmatter":{"title":"Graphics Programming(六) —— 纹理","index":6}}},{"node":{"fields":{"slug":"/graphics/transparency"},"frontmatter":{"title":"Graphics Programming(七) —— 透明效果","index":7}}},{"node":{"fields":{"slug":"/graphics/simpleAnimation"},"frontmatter":{"title":"Graphics Programming(八) —— 简单动画","index":8}}},{"node":{"fields":{"slug":"/graphics/post-processing"},"frontmatter":{"title":"Graphics Programming(九) —— 后期处理效果","index":9}}},{"node":{"fields":{"slug":"/graphics/particularRendering"},"frontmatter":{"title":"Graphics Programming(十) —— 特殊渲染","index":10}}}]}},"pageContext":{"frontmatter":{"title":"内置的变量: inner matrix","tags":["graphics"],"index":3.1},"title":"内置的变量: inner matrix","date":null,"slug":"/graphics/mathematicalBasis/innerMatrix","genByTemplate":"graphics"}},"staticQueryHashes":["1663153949","3649515864","49750724","63159454"]}